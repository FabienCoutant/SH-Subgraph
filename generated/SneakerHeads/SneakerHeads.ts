// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EventSaleChange extends ethereum.Event {
  get params(): EventSaleChange__Params {
    return new EventSaleChange__Params(this);
  }
}

export class EventSaleChange__Params {
  _event: EventSaleChange;

  constructor(event: EventSaleChange) {
    this._event = event;
  }

  get sale(): EventSaleChangeSaleStruct {
    return changetype<EventSaleChangeSaleStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class EventSaleChangeSaleStruct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get end(): BigInt {
    return this[1].toBigInt();
  }

  get maxPerWallet(): i32 {
    return this[2].toI32();
  }

  get maxPerTx(): i32 {
    return this[3].toI32();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get paused(): boolean {
    return this[5].toBoolean();
  }
}

export class Expelled extends ethereum.Event {
  get params(): Expelled__Params {
    return new Expelled__Params(this);
  }
}

export class Expelled__Params {
  _event: Expelled;

  constructor(event: Expelled) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Stocked extends ethereum.Event {
  get params(): Stocked__Params {
    return new Stocked__Params(this);
  }
}

export class Stocked__Params {
  _event: Stocked;

  constructor(event: Stocked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnStocked extends ethereum.Event {
  get params(): UnStocked__Params {
    return new UnStocked__Params(this);
  }
}

export class UnStocked__Params {
  _event: UnStocked;

  constructor(event: UnStocked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SneakerHeads__mintsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getEnd(): BigInt {
    return this.value1;
  }

  getMaxPerWallet(): i32 {
    return this.value2;
  }

  getMaxPerTx(): i32 {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getPaused(): boolean {
    return this.value5;
  }
}

export class SneakerHeads__partsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getWallet(): Address {
    return this.value0;
  }

  getSalePart(): BigInt {
    return this.value1;
  }
}

export class SneakerHeads__stockingPeriodResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getStocked(): boolean {
    return this.value0;
  }

  getCurrent(): BigInt {
    return this.value1;
  }

  getTotal(): BigInt {
    return this.value2;
  }

  getLevel(): BigInt {
    return this.value3;
  }
}

export class SneakerHeads__waitingResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getEnd(): BigInt {
    return this.value1;
  }

  getMaxPerWallet(): i32 {
    return this.value2;
  }

  getMaxPerTx(): i32 {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getPaused(): boolean {
    return this.value5;
  }
}

export class SneakerHeads extends ethereum.SmartContract {
  static bind(address: Address): SneakerHeads {
    return new SneakerHeads("SneakerHeads", address);
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint32)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RESERVE(): BigInt {
    let result = super.call("RESERVE", "RESERVE():(uint32)", []);

    return result[0].toBigInt();
  }

  try_RESERVE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("RESERVE", "RESERVE():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  START_AT(): i32 {
    let result = super.call("START_AT", "START_AT():(uint8)", []);

    return result[0].toI32();
  }

  try_START_AT(): ethereum.CallResult<i32> {
    let result = super.tryCall("START_AT", "START_AT():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  burnedTracker(): BigInt {
    let result = super.call("burnedTracker", "burnedTracker():(uint32)", []);

    return result[0].toBigInt();
  }

  try_burnedTracker(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burnedTracker", "burnedTracker():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  mintBalance(_wallet: Address): i32 {
    let result = super.call("mintBalance", "mintBalance(address):(uint16)", [
      ethereum.Value.fromAddress(_wallet)
    ]);

    return result[0].toI32();
  }

  try_mintBalance(_wallet: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("mintBalance", "mintBalance(address):(uint16)", [
      ethereum.Value.fromAddress(_wallet)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  mintIsOpen(): boolean {
    let result = super.call("mintIsOpen", "mintIsOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintIsOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintIsOpen", "mintIsOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintPrice(_count: BigInt): BigInt {
    let result = super.call("mintPrice", "mintPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_count)
    ]);

    return result[0].toBigInt();
  }

  try_mintPrice(_count: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPrice", "mintPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_count)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintTracked(): BigInt {
    let result = super.call("mintTracked", "mintTracked():(uint32)", []);

    return result[0].toBigInt();
  }

  try_mintTracked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintTracked", "mintTracked():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mints(): SneakerHeads__mintsResult {
    let result = super.call(
      "mints",
      "mints():(uint64,uint64,uint16,uint16,uint256,bool)",
      []
    );

    return new SneakerHeads__mintsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_mints(): ethereum.CallResult<SneakerHeads__mintsResult> {
    let result = super.tryCall(
      "mints",
      "mints():(uint64,uint64,uint16,uint16,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SneakerHeads__mintsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parts(param0: BigInt): SneakerHeads__partsResult {
    let result = super.call("parts", "parts(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new SneakerHeads__partsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_parts(param0: BigInt): ethereum.CallResult<SneakerHeads__partsResult> {
    let result = super.tryCall("parts", "parts(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SneakerHeads__partsResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  saleDivider(): BigInt {
    let result = super.call("saleDivider", "saleDivider():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleDivider(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleDivider", "saleDivider():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stockingCurrent(tokenId: BigInt): BigInt {
    let result = super.call(
      "stockingCurrent",
      "stockingCurrent(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_stockingCurrent(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stockingCurrent",
      "stockingCurrent(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stockingLevel(tokenId: BigInt): BigInt {
    let result = super.call(
      "stockingLevel",
      "stockingLevel(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_stockingLevel(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stockingLevel",
      "stockingLevel(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stockingOpen(): boolean {
    let result = super.call("stockingOpen", "stockingOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_stockingOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stockingOpen", "stockingOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stockingPeriod(tokenId: BigInt): SneakerHeads__stockingPeriodResult {
    let result = super.call(
      "stockingPeriod",
      "stockingPeriod(uint256):(bool,uint64,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new SneakerHeads__stockingPeriodResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_stockingPeriod(
    tokenId: BigInt
  ): ethereum.CallResult<SneakerHeads__stockingPeriodResult> {
    let result = super.tryCall(
      "stockingPeriod",
      "stockingPeriod(uint256):(bool,uint64,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SneakerHeads__stockingPeriodResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint32)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  waiting(): SneakerHeads__waitingResult {
    let result = super.call(
      "waiting",
      "waiting():(uint64,uint64,uint16,uint16,uint256,bool)",
      []
    );

    return new SneakerHeads__waitingResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_waiting(): ethereum.CallResult<SneakerHeads__waitingResult> {
    let result = super.tryCall(
      "waiting",
      "waiting():(uint64,uint64,uint16,uint16,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SneakerHeads__waitingResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  waitingIsOpen(): boolean {
    let result = super.call("waitingIsOpen", "waitingIsOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_waitingIsOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("waitingIsOpen", "waitingIsOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  walletOfOwner(_owner: Address): Array<BigInt> {
    let result = super.call(
      "walletOfOwner",
      "walletOfOwner(address):(uint32[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigIntArray();
  }

  try_walletOfOwner(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "walletOfOwner",
      "walletOfOwner(address):(uint32[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ExpelFromStockCall extends ethereum.Call {
  get inputs(): ExpelFromStockCall__Inputs {
    return new ExpelFromStockCall__Inputs(this);
  }

  get outputs(): ExpelFromStockCall__Outputs {
    return new ExpelFromStockCall__Outputs(this);
  }
}

export class ExpelFromStockCall__Inputs {
  _call: ExpelFromStockCall;

  constructor(call: ExpelFromStockCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExpelFromStockCall__Outputs {
  _call: ExpelFromStockCall;

  constructor(call: ExpelFromStockCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _type(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _count(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseMintCall extends ethereum.Call {
  get inputs(): PauseMintCall__Inputs {
    return new PauseMintCall__Inputs(this);
  }

  get outputs(): PauseMintCall__Outputs {
    return new PauseMintCall__Outputs(this);
  }
}

export class PauseMintCall__Inputs {
  _call: PauseMintCall;

  constructor(call: PauseMintCall) {
    this._call = call;
  }

  get _pause(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class PauseMintCall__Outputs {
  _call: PauseMintCall;

  constructor(call: PauseMintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReserveCall extends ethereum.Call {
  get inputs(): ReserveCall__Inputs {
    return new ReserveCall__Inputs(this);
  }

  get outputs(): ReserveCall__Outputs {
    return new ReserveCall__Outputs(this);
  }
}

export class ReserveCall__Inputs {
  _call: ReserveCall;

  constructor(call: ReserveCall) {
    this._call = call;
  }

  get _count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReserveCall__Outputs {
  _call: ReserveCall;

  constructor(call: ReserveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferWhileStockingCall extends ethereum.Call {
  get inputs(): SafeTransferWhileStockingCall__Inputs {
    return new SafeTransferWhileStockingCall__Inputs(this);
  }

  get outputs(): SafeTransferWhileStockingCall__Outputs {
    return new SafeTransferWhileStockingCall__Outputs(this);
  }
}

export class SafeTransferWhileStockingCall__Inputs {
  _call: SafeTransferWhileStockingCall;

  constructor(call: SafeTransferWhileStockingCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferWhileStockingCall__Outputs {
  _call: SafeTransferWhileStockingCall;

  constructor(call: SafeTransferWhileStockingCall) {
    this._call = call;
  }
}

export class SetAdminAddressCall extends ethereum.Call {
  get inputs(): SetAdminAddressCall__Inputs {
    return new SetAdminAddressCall__Inputs(this);
  }

  get outputs(): SetAdminAddressCall__Outputs {
    return new SetAdminAddressCall__Outputs(this);
  }
}

export class SetAdminAddressCall__Inputs {
  _call: SetAdminAddressCall;

  constructor(call: SetAdminAddressCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _active(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAdminAddressCall__Outputs {
  _call: SetAdminAddressCall;

  constructor(call: SetAdminAddressCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseUriCall extends ethereum.Call {
  get inputs(): SetBaseUriCall__Inputs {
    return new SetBaseUriCall__Inputs(this);
  }

  get outputs(): SetBaseUriCall__Outputs {
    return new SetBaseUriCall__Outputs(this);
  }
}

export class SetBaseUriCall__Inputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseUriCall__Outputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class SetMerkleRootCall extends ethereum.Call {
  get inputs(): SetMerkleRootCall__Inputs {
    return new SetMerkleRootCall__Inputs(this);
  }

  get outputs(): SetMerkleRootCall__Outputs {
    return new SetMerkleRootCall__Outputs(this);
  }
}

export class SetMerkleRootCall__Inputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetMerkleRootCall__Outputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }
}

export class SetMintCall extends ethereum.Call {
  get inputs(): SetMintCall__Inputs {
    return new SetMintCall__Inputs(this);
  }

  get outputs(): SetMintCall__Outputs {
    return new SetMintCall__Outputs(this);
  }
}

export class SetMintCall__Inputs {
  _call: SetMintCall;

  constructor(call: SetMintCall) {
    this._call = call;
  }

  get _mint(): SetMintCall_mintStruct {
    return changetype<SetMintCall_mintStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetMintCall__Outputs {
  _call: SetMintCall;

  constructor(call: SetMintCall) {
    this._call = call;
  }
}

export class SetMintCall_mintStruct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get end(): BigInt {
    return this[1].toBigInt();
  }

  get maxPerWallet(): i32 {
    return this[2].toI32();
  }

  get maxPerTx(): i32 {
    return this[3].toI32();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get paused(): boolean {
    return this[5].toBoolean();
  }
}

export class SetStockingOpenCall extends ethereum.Call {
  get inputs(): SetStockingOpenCall__Inputs {
    return new SetStockingOpenCall__Inputs(this);
  }

  get outputs(): SetStockingOpenCall__Outputs {
    return new SetStockingOpenCall__Outputs(this);
  }
}

export class SetStockingOpenCall__Inputs {
  _call: SetStockingOpenCall;

  constructor(call: SetStockingOpenCall) {
    this._call = call;
  }

  get open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStockingOpenCall__Outputs {
  _call: SetStockingOpenCall;

  constructor(call: SetStockingOpenCall) {
    this._call = call;
  }
}

export class SetStockingStepCall extends ethereum.Call {
  get inputs(): SetStockingStepCall__Inputs {
    return new SetStockingStepCall__Inputs(this);
  }

  get outputs(): SetStockingStepCall__Outputs {
    return new SetStockingStepCall__Outputs(this);
  }
}

export class SetStockingStepCall__Inputs {
  _call: SetStockingStepCall;

  constructor(call: SetStockingStepCall) {
    this._call = call;
  }

  get _durationFirst(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _durationNext(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStockingStepCall__Outputs {
  _call: SetStockingStepCall;

  constructor(call: SetStockingStepCall) {
    this._call = call;
  }
}

export class SetWaitingMintCall extends ethereum.Call {
  get inputs(): SetWaitingMintCall__Inputs {
    return new SetWaitingMintCall__Inputs(this);
  }

  get outputs(): SetWaitingMintCall__Outputs {
    return new SetWaitingMintCall__Outputs(this);
  }
}

export class SetWaitingMintCall__Inputs {
  _call: SetWaitingMintCall;

  constructor(call: SetWaitingMintCall) {
    this._call = call;
  }

  get _waiting(): SetWaitingMintCall_waitingStruct {
    return changetype<SetWaitingMintCall_waitingStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetWaitingMintCall__Outputs {
  _call: SetWaitingMintCall;

  constructor(call: SetWaitingMintCall) {
    this._call = call;
  }
}

export class SetWaitingMintCall_waitingStruct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get end(): BigInt {
    return this[1].toBigInt();
  }

  get maxPerWallet(): i32 {
    return this[2].toI32();
  }

  get maxPerTx(): i32 {
    return this[3].toI32();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get paused(): boolean {
    return this[5].toBoolean();
  }
}

export class ToggleStockingCall extends ethereum.Call {
  get inputs(): ToggleStockingCall__Inputs {
    return new ToggleStockingCall__Inputs(this);
  }

  get outputs(): ToggleStockingCall__Outputs {
    return new ToggleStockingCall__Outputs(this);
  }
}

export class ToggleStockingCall__Inputs {
  _call: ToggleStockingCall;

  constructor(call: ToggleStockingCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ToggleStockingCall__Outputs {
  _call: ToggleStockingCall;

  constructor(call: ToggleStockingCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawSalesCall extends ethereum.Call {
  get inputs(): WithdrawSalesCall__Inputs {
    return new WithdrawSalesCall__Inputs(this);
  }

  get outputs(): WithdrawSalesCall__Outputs {
    return new WithdrawSalesCall__Outputs(this);
  }
}

export class WithdrawSalesCall__Inputs {
  _call: WithdrawSalesCall;

  constructor(call: WithdrawSalesCall) {
    this._call = call;
  }
}

export class WithdrawSalesCall__Outputs {
  _call: WithdrawSalesCall;

  constructor(call: WithdrawSalesCall) {
    this._call = call;
  }
}
